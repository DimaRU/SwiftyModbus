{"Classes/SwiftyModbusResult/ErrorRecoveryMode.html#/s:SY8rawValue03RawB0Qzvp":{"name":"rawValue","parent_name":"ErrorRecoveryMode"},"Classes/SwiftyModbusResult/ErrorRecoveryMode.html#/s:s9OptionSetP8rawValuex03RawD0Qz_tcfc":{"name":"init(rawValue:)","parent_name":"ErrorRecoveryMode"},"Classes/SwiftyModbusResult/ErrorRecoveryMode.html#/s:12SwiftyModbus0aB6ResultC17ErrorRecoveryModeV12recoveryNoneAEvpZ":{"name":"recoveryNone","abstract":"<p>Undocumented</p>","parent_name":"ErrorRecoveryMode"},"Classes/SwiftyModbusResult/ErrorRecoveryMode.html#/s:12SwiftyModbus0aB6ResultC17ErrorRecoveryModeV12recoveryLinkAEvpZ":{"name":"recoveryLink","abstract":"<p>Undocumented</p>","parent_name":"ErrorRecoveryMode"},"Classes/SwiftyModbusResult/ErrorRecoveryMode.html#/s:12SwiftyModbus0aB6ResultC17ErrorRecoveryModeV16recoveryProtocolAEvpZ":{"name":"recoveryProtocol","abstract":"<p>Undocumented</p>","parent_name":"ErrorRecoveryMode"},"Classes/SwiftyModbusResult/ModbusError.html#/s:12SwiftyModbus0aB6ResultC0B5ErrorV7messageSSvp":{"name":"message","abstract":"<p>Undocumented</p>","parent_name":"ModbusError"},"Classes/SwiftyModbusResult/ModbusError.html#/s:12SwiftyModbus0aB6ResultC0B5ErrorV5errnos5Int32Vvp":{"name":"errno","abstract":"<p>Undocumented</p>","parent_name":"ModbusError"},"Classes/SwiftyModbusResult/ModbusError.html":{"name":"ModbusError","abstract":"<p>libmodbus error</p>","parent_name":"SwiftyModbusResult"},"Classes/SwiftyModbusResult/ErrorRecoveryMode.html":{"name":"ErrorRecoveryMode","abstract":"<p>Error recovery options for setErrorRecovery function</p>","parent_name":"SwiftyModbusResult"},"Classes/SwiftyModbusResult.html#/s:12SwiftyModbus0aB6ResultC7address4portACSS_Sitcfc":{"name":"init(address:port:)","abstract":"<p>Create a SwiftyModbus class for TCP Protocol</p>","parent_name":"SwiftyModbusResult"},"Classes/SwiftyModbusResult.html#/s:12SwiftyModbus0aB6ResultC9debugModeSbvp":{"name":"debugMode","abstract":"<p>Set debug flag of the context. When true, many verbose messages are displayed on stdout and stderr.</p>","parent_name":"SwiftyModbusResult"},"Classes/SwiftyModbusResult.html#/s:12SwiftyModbus0aB6ResultC8setSlaveyys5Int32VF":{"name":"setSlave(_:)","abstract":"<p>Set the slave number</p>","parent_name":"SwiftyModbusResult"},"Classes/SwiftyModbusResult.html#/s:12SwiftyModbus0aB6ResultC7connects0C0OyytAC0B5ErrorVGyF":{"name":"connect()","abstract":"<p>Establish a connection to a Modbus server</p>","parent_name":"SwiftyModbusResult"},"Classes/SwiftyModbusResult.html#/s:12SwiftyModbus0aB6ResultC10disconnectyyF":{"name":"disconnect()","abstract":"<p>Close the connection established</p>","parent_name":"SwiftyModbusResult"},"Classes/SwiftyModbusResult.html#/s:12SwiftyModbus0aB6ResultC9setSocket6socketys5Int32V_tF":{"name":"setSocket(socket:)","abstract":"<p>Set socket of the modbus context</p>","parent_name":"SwiftyModbusResult"},"Classes/SwiftyModbusResult.html#/s:12SwiftyModbus0aB6ResultC9getSockets5Int32VyF":{"name":"getSocket()","abstract":"<p>Get socket of the modbus context</p>","parent_name":"SwiftyModbusResult"},"Classes/SwiftyModbusResult.html#/s:12SwiftyModbus0aB6ResultC15responseTimeoutSdvp":{"name":"responseTimeout","abstract":"<p>Get/set the timeout TimeInterval used to wait for a response and connect</p>","parent_name":"SwiftyModbusResult"},"Classes/SwiftyModbusResult.html#/s:12SwiftyModbus0aB6ResultC11byteTimeoutSdvp":{"name":"byteTimeout","abstract":"<p>Get/set the timeout interval between two consecutive bytes of the same message</p>","parent_name":"SwiftyModbusResult"},"Classes/SwiftyModbusResult.html#/s:12SwiftyModbus0aB6ResultC12headerLengths5Int32Vvp":{"name":"headerLength","abstract":"<p>Retrieve the current header length</p>","parent_name":"SwiftyModbusResult"},"Classes/SwiftyModbusResult.html#/s:12SwiftyModbus0aB6ResultC5flushs0C0OyytAC0B5ErrorVGyF":{"name":"flush()","abstract":"<p>Flush non-transmitted data and discard data received but not read</p>","parent_name":"SwiftyModbusResult"},"Classes/SwiftyModbusResult.html#/s:12SwiftyModbus0aB6ResultC16setErrorRecovery4modes0C0OyytAC0bE0VGAC0eF4ModeV_tF":{"name":"setErrorRecovery(mode:)","abstract":"<p>Set the error recovery mode to apply when the connection fails or the byte received is not expected.</p>","parent_name":"SwiftyModbusResult"},"Classes/SwiftyModbusResult.html#/s:12SwiftyModbus0aB6ResultC8readBits4addr5counts0C0OySays5UInt8VGAC0B5ErrorVGs5Int32V_APtF":{"name":"readBits(addr:count:)","abstract":"<p>Read the status of the bits (coils) to the address of the remote device.","parent_name":"SwiftyModbusResult"},"Classes/SwiftyModbusResult.html#/s:12SwiftyModbus0aB6ResultC13readInputBits4addr5counts0C0OySays5UInt8VGAC0B5ErrorVGs5Int32V_APtF":{"name":"readInputBits(addr:count:)","abstract":"<p>Read the status of the input bits to the address of the remote device.","parent_name":"SwiftyModbusResult"},"Classes/SwiftyModbusResult.html#/s:12SwiftyModbus0aB6ResultC12readRegister4addrs0C0Oys6UInt16VAC0B5ErrorVGs5Int32V_tF":{"name":"readRegister(addr:)","abstract":"<p>Read the content of the one holding register by address of the remote device.","parent_name":"SwiftyModbusResult"},"Classes/SwiftyModbusResult.html#/s:12SwiftyModbus0aB6ResultC13readRegisters4addr5counts0C0OySays6UInt16VGAC0B5ErrorVGs5Int32V_APtF":{"name":"readRegisters(addr:count:)","abstract":"<p>Read the content of the holding registers to the address of the remote device.","parent_name":"SwiftyModbusResult"},"Classes/SwiftyModbusResult.html#/s:12SwiftyModbus0aB6ResultC18readInputRegisters4addr5counts0C0OySays6UInt16VGAC0B5ErrorVGs5Int32V_APtF":{"name":"readInputRegisters(addr:count:)","abstract":"<p>Read the content of the input registers to the address of the remote device.","parent_name":"SwiftyModbusResult"},"Classes/SwiftyModbusResult.html#/s:12SwiftyModbus0aB6ResultC8writeBit4addr6statuss0C0OyytAC0B5ErrorVGs5Int32V_SbtF":{"name":"writeBit(addr:status:)","abstract":"<p>Write the status at the address of the remote device.","parent_name":"SwiftyModbusResult"},"Classes/SwiftyModbusResult.html#/s:12SwiftyModbus0aB6ResultC9writeBits4addr6statuss0C0OyytAC0B5ErrorVGs5Int32V_Says5UInt8VGtF":{"name":"writeBits(addr:status:)","abstract":"<p>Write the status of the bits (coils) at the address of the remote device.","parent_name":"SwiftyModbusResult"},"Classes/SwiftyModbusResult.html#/s:12SwiftyModbus0aB6ResultC13writeRegister4addr5values0C0OyytAC0B5ErrorVGs5Int32V_s6UInt16VtF":{"name":"writeRegister(addr:value:)","abstract":"<p>Write the value to the holding register at the address of the remote device.","parent_name":"SwiftyModbusResult"},"Classes/SwiftyModbusResult.html#/s:12SwiftyModbus0aB6ResultC14writeRegisters4addr4datas0C0OyytAC0B5ErrorVGs5Int32V_Says6UInt16VGtF":{"name":"writeRegisters(addr:data:)","abstract":"<p>Write to holding registers at address of the remote device.","parent_name":"SwiftyModbusResult"},"Classes/SwiftyModbusResult.html#/s:12SwiftyModbus0aB6ResultC17maskWriteRegister4addr0D3AND0D2ORs0C0OyytAC0B5ErrorVGs5Int32V_s6UInt16VAPtF":{"name":"maskWriteRegister(addr:maskAND:maskOR:)","abstract":"<p>Modify the value of the holding register at the remote device using the algorithm:","parent_name":"SwiftyModbusResult"},"Classes/SwiftyModbusResult.html#/s:12SwiftyModbus0aB6ResultC21writeAndReadRegisters0D4Addr4data04readH00J5Counts0C0OySays6UInt16VGAC0B5ErrorVGs5Int32V_Am2RtF":{"name":"writeAndReadRegisters(writeAddr:data:readAddr:readCount:)","abstract":"<p>Write and read number of registers in a single transaction","parent_name":"SwiftyModbusResult"},"Classes/SwiftyModbus/ErrorRecoveryMode.html#/s:SY8rawValue03RawB0Qzvp":{"name":"rawValue","parent_name":"ErrorRecoveryMode"},"Classes/SwiftyModbus/ErrorRecoveryMode.html#/s:s9OptionSetP8rawValuex03RawD0Qz_tcfc":{"name":"init(rawValue:)","parent_name":"ErrorRecoveryMode"},"Classes/SwiftyModbus/ErrorRecoveryMode.html#/s:12SwiftyModbusAAC17ErrorRecoveryModeV12recoveryNoneADvpZ":{"name":"recoveryNone","abstract":"<p>Undocumented</p>","parent_name":"ErrorRecoveryMode"},"Classes/SwiftyModbus/ErrorRecoveryMode.html#/s:12SwiftyModbusAAC17ErrorRecoveryModeV12recoveryLinkADvpZ":{"name":"recoveryLink","abstract":"<p>Undocumented</p>","parent_name":"ErrorRecoveryMode"},"Classes/SwiftyModbus/ErrorRecoveryMode.html#/s:12SwiftyModbusAAC17ErrorRecoveryModeV16recoveryProtocolADvpZ":{"name":"recoveryProtocol","abstract":"<p>Undocumented</p>","parent_name":"ErrorRecoveryMode"},"Classes/SwiftyModbus/ModbusError.html#/s:12SwiftyModbusAAC0B5ErrorV7messageSSvp":{"name":"message","abstract":"<p>Undocumented</p>","parent_name":"ModbusError"},"Classes/SwiftyModbus/ModbusError.html#/s:12SwiftyModbusAAC0B5ErrorV5errnos5Int32Vvp":{"name":"errno","abstract":"<p>Undocumented</p>","parent_name":"ModbusError"},"Classes/SwiftyModbus/ModbusError.html":{"name":"ModbusError","abstract":"<p>libmodbus error</p>","parent_name":"SwiftyModbus"},"Classes/SwiftyModbus/ErrorRecoveryMode.html":{"name":"ErrorRecoveryMode","abstract":"<p>Error recovery options for setErrorRecovery function</p>","parent_name":"SwiftyModbus"},"Classes/SwiftyModbus.html#/s:12SwiftyModbusAAC7address4portABSS_Sitcfc":{"name":"init(address:port:)","abstract":"<p>Create a SwiftyModbus class for TCP Protocol</p>","parent_name":"SwiftyModbus"},"Classes/SwiftyModbus.html#/s:12SwiftyModbusAAC9debugModeSbvp":{"name":"debugMode","abstract":"<p>Set debug flag of the context. When true, many verbose messages are displayed on stdout and stderr.</p>","parent_name":"SwiftyModbus"},"Classes/SwiftyModbus.html#/s:12SwiftyModbusAAC8setSlaveyys5Int32VF":{"name":"setSlave(_:)","abstract":"<p>Set the slave number</p>","parent_name":"SwiftyModbus"},"Classes/SwiftyModbus.html#/s:12SwiftyModbusAAC7connectyyKF":{"name":"connect()","abstract":"<p>Establish a connection to a Modbus server</p>","parent_name":"SwiftyModbus"},"Classes/SwiftyModbus.html#/s:12SwiftyModbusAAC10disconnectyyF":{"name":"disconnect()","abstract":"<p>Close the connection established</p>","parent_name":"SwiftyModbus"},"Classes/SwiftyModbus.html#/s:12SwiftyModbusAAC9setSocket6socketys5Int32V_tF":{"name":"setSocket(socket:)","abstract":"<p>Set socket of the modbus context</p>","parent_name":"SwiftyModbus"},"Classes/SwiftyModbus.html#/s:12SwiftyModbusAAC9getSockets5Int32VyF":{"name":"getSocket()","abstract":"<p>Get socket of the modbus context</p>","parent_name":"SwiftyModbus"},"Classes/SwiftyModbus.html#/s:12SwiftyModbusAAC15responseTimeoutSdvp":{"name":"responseTimeout","abstract":"<p>Get/set the timeout TimeInterval used to wait for a response and connect</p>","parent_name":"SwiftyModbus"},"Classes/SwiftyModbus.html#/s:12SwiftyModbusAAC11byteTimeoutSdvp":{"name":"byteTimeout","abstract":"<p>Get/set the timeout interval between two consecutive bytes of the same message</p>","parent_name":"SwiftyModbus"},"Classes/SwiftyModbus.html#/s:12SwiftyModbusAAC12headerLengths5Int32Vvp":{"name":"headerLength","abstract":"<p>Retrieve the current header length</p>","parent_name":"SwiftyModbus"},"Classes/SwiftyModbus.html#/s:12SwiftyModbusAAC5flushyyKF":{"name":"flush()","abstract":"<p>Flush non-transmitted data and discard data received but not read</p>","parent_name":"SwiftyModbus"},"Classes/SwiftyModbus.html#/s:12SwiftyModbusAAC16setErrorRecovery4modeyAB0dE4ModeV_tKF":{"name":"setErrorRecovery(mode:)","abstract":"<p>Set the error recovery mode to apply when the connection fails or the byte received is not expected.</p>","parent_name":"SwiftyModbus"},"Classes/SwiftyModbus.html#/s:12SwiftyModbusAAC8readBits4addr5countSays5UInt8VGs5Int32V_AJtKF":{"name":"readBits(addr:count:)","abstract":"<p>Read the status of the bits (coils) to the address of the remote device.","parent_name":"SwiftyModbus"},"Classes/SwiftyModbus.html#/s:12SwiftyModbusAAC13readInputBits4addr5countSays5UInt8VGs5Int32V_AJtKF":{"name":"readInputBits(addr:count:)","abstract":"<p>Read the status of the input bits to the address of the remote device.","parent_name":"SwiftyModbus"},"Classes/SwiftyModbus.html#/s:12SwiftyModbusAAC12readRegister4addrs6UInt16Vs5Int32V_tKF":{"name":"readRegister(addr:)","abstract":"<p>Read the content of the one holding register by address of the remote device.","parent_name":"SwiftyModbus"},"Classes/SwiftyModbus.html#/s:12SwiftyModbusAAC13readRegisters4addr5countSays6UInt16VGs5Int32V_AJtKF":{"name":"readRegisters(addr:count:)","abstract":"<p>Read the content of the holding registers to the address of the remote device.","parent_name":"SwiftyModbus"},"Classes/SwiftyModbus.html#/s:12SwiftyModbusAAC18readInputRegisters4addr5countSays6UInt16VGs5Int32V_AJtKF":{"name":"readInputRegisters(addr:count:)","abstract":"<p>Read the content of the input registers to the address of the remote device.","parent_name":"SwiftyModbus"},"Classes/SwiftyModbus.html#/s:12SwiftyModbusAAC8writeBit4addr6statusys5Int32V_SbtKF":{"name":"writeBit(addr:status:)","abstract":"<p>Write the status at the address of the remote device.","parent_name":"SwiftyModbus"},"Classes/SwiftyModbus.html#/s:12SwiftyModbusAAC9writeBits4addr6statusys5Int32V_Says5UInt8VGtKF":{"name":"writeBits(addr:status:)","abstract":"<p>Write the status of the bits (coils) at the address of the remote device.","parent_name":"SwiftyModbus"},"Classes/SwiftyModbus.html#/s:12SwiftyModbusAAC13writeRegister4addr5valueys5Int32V_s6UInt16VtKF":{"name":"writeRegister(addr:value:)","abstract":"<p>Write the value to the holding register at the address of the remote device.","parent_name":"SwiftyModbus"},"Classes/SwiftyModbus.html#/s:12SwiftyModbusAAC14writeRegisters4addr4datays5Int32V_Says6UInt16VGtKF":{"name":"writeRegisters(addr:data:)","abstract":"<p>Write to holding registers at address of the remote device.","parent_name":"SwiftyModbus"},"Classes/SwiftyModbus.html#/s:12SwiftyModbusAAC17maskWriteRegister4addr0C3AND0C2ORys5Int32V_s6UInt16VAJtKF":{"name":"maskWriteRegister(addr:maskAND:maskOR:)","abstract":"<p>Modify the value of the holding register at the remote device using the algorithm:","parent_name":"SwiftyModbus"},"Classes/SwiftyModbus.html#/s:12SwiftyModbusAAC21writeAndReadRegisters0C4Addr4data04readG00I5CountSays6UInt16VGs5Int32V_Aj2LtKF":{"name":"writeAndReadRegisters(writeAddr:data:readAddr:readCount:)","abstract":"<p>Write and read number of registers in a single transaction","parent_name":"SwiftyModbus"},"Classes/SwiftyModbus.html":{"name":"SwiftyModbus","abstract":"<p>Libmodbus wrapper class</p>"},"Classes/SwiftyModbusResult.html":{"name":"SwiftyModbusResult","abstract":"<p>Libmodbus wrapper class with Result</p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"}}